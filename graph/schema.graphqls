input ViltInput {
  id: String
  lsp_id: String
  course_id: String
  no_of_learners: Int
  trainers: [String]
  moderators: [String]
  course_start_date: String
  course_end_date: String
  curriculum: String
  is_trainer_decided: Boolean
  is_moderator_decided: Boolean
  is_start_date_decided: Boolean
  is_end_date_decided: Boolean
  pricing_type: String
  price_per_seat: Int
  currency: String
  tax_percentage: Float
  is_registration_open:Boolean
  is_booking_open: Boolean
  max_registrations: Int
  registration_end_date: Int
  booking_start_date: Int
  booking_end_date: Int
  registration_publish_by: String
  registration_publish_on: Int
  booking_publish_on: Int
  booking_publish_by: String
  registration_start_date: Int
  status: String
}

type Vilt {
  id: String
  lsp_id: String
  course_id: String
  no_of_learners: Int
  trainers: [String]
  moderators: [String]
  course_start_date: String
  course_end_date: String
  is_trainer_decided: Boolean
  is_moderator_decided: Boolean
  is_start_date_decided: Boolean
  is_end_date_decided: Boolean
  curriculum: String
  pricing_type: String
  price_per_seat: Int
  currency: String
  tax_percentage: Float
  is_registration_open:Boolean
  is_booking_open: Boolean
  max_registrations: Int
  registration_end_date: Int
  booking_start_date: Int
  booking_end_date: Int
  registration_publish_by: String
  registration_publish_on: Int
  booking_publish_on: Int
  booking_publish_by: String
  registration_start_date: Int
  created_at: String
  created_by: String
  updated_at: String
  updated_by: String
  status: String
}

input TopicClassroomInput {
  id: String
  topic_id: String
  module_id: String
  course_id: String
  trainers: [String]
  moderators: [String]
  training_start_time: String
  training_end_time: String
  duration: String
  breaktime: String
  language: String
  is_screen_share_enabled: Boolean
  is_chat_enabled: Boolean
  is_microphone_enabled: Boolean
  is_qa_enabled: Boolean
  is_camera_enabled: Boolean
  is_override_config: Boolean
  status: String
}

type TopicClassroom {
  id: String
  topic_id: String
  trainers: [String]
  moderators: [String]
  training_start_time: String
  training_end_time: String
  duration: String
  breaktime: String
  language: String
  is_screen_share_enabled: Boolean
  is_chat_enabled: Boolean
  is_microphone_enabled: Boolean
  is_qa_enabled: Boolean
  is_camera_enabled: Boolean
  is_override_config: Boolean
  created_at: String
  created_by: String
  updated_at: String
  updated_by: String
  status: String
}

input TrainerInput {
  id: String
  lsp_id: String
  user_id: String
  vendor_id: String
  expertise: [String]
  status: String
}

type Trainer {
  id: String
  lsp_id: String
  user_id: String
  vendor_id: String
  expertise: [String]
  status: String
  created_at: String
  created_by: String
  updated_at: String
  updated_by: String
}

type PaginatedTrainer {
  trainers: [Trainer]
  pageCursor: String
  Direction: String
  pageSize: Int
}

input TrainerFilters {
  name: String
}

input UserCourseRegisterInput {
  id: String
  course_id: String
  user_id: String
  registration_date: Int
  invoice: String
  status: String
}

type UserCourseRegister {
  id: String
  course_id: String
  user_id: String
  registration_date: Int
  invoice: String
  status: String
  created_at: String
  created_by: String
  updated_at: String
  updated_by: String
}

type PaginatedUserCourseRegister {
  data: [UserCourseRegister]
  pageCursor: String
  direction: String
  pageSize: Int
}

type Course {
  id: ID
  name: String
  lspId: String
  publisher: String
  description: String
  summary: String
  instructor: String
  image: String
  previewVideo: String
  tileImage: String
  owner: String
  duration: Int
  expertise_level: String
  language: [String]
  benefits: [String]
  outcomes: [String]
  created_at: String
  updated_at: String
  type: String
  prequisites: [String]
  goodFor: [String]
  mustFor: [String]
  related_skills: [String]
  publish_date: String
  expiry_date: String
  expected_completion: String
  qa_required: Boolean
  approvers: [String]
  created_by: String
  updated_by: String
  status: String
  is_display: Boolean
  category: String
  sub_category: String
  sub_categories: [sub_categories]
  is_active: Boolean
}

type sub_categories {
  name: String
  rank: Int
}

type Mutation {
  createViltData(input: ViltInput): Vilt
  updateViltData(input: ViltInput): Vilt
  createTopicClassroom(input: TopicClassroomInput): TopicClassroom
  updateTopicClassroom(input: TopicClassroomInput): TopicClassroom
  createTrainerData(input: TrainerInput): Trainer
  updateTrainerData(input: TrainerInput): Trainer
  registerUserForCourse(input: UserCourseRegisterInput): UserCourseRegister
  updateRegistrationForCourse(input: UserCourseRegisterInput): UserCourseRegister
}

type Query {
  getViltData(courseId: String): [Vilt]
  getViltDataById(id: String): Vilt
  getTopicClassroom(topic_id: String): TopicClassroom
  getTopicClassroomsByTopicIds(topic_ids: [String]): [TopicClassroom]
  getTrainerData(lsp_id: String, vendor_id: String, pageCursor: String, Direction: String, pageSize: Int, filters: TrainerFilters): PaginatedTrainer
  getTrainerById(id: String): Trainer
  getAllRegistrations(course_id: String, pageCursor: String, Direction: String, pageSize: Int): PaginatedUserCourseRegister
  getRegistrationDetails(id: String): UserCourseRegister
  getTrainerCourses(user_id: String): [Course]
}
